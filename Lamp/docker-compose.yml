version: '3.8'

#This is a list of the services (containers) that you will be using to run whatever application you have written.
#Let's say you are writing a simple php web app with a database. Then these are the containers that you would use
services:
 #This is the name of one of your first container. You can name it whatever you want.

 #You will want to name this something memorable as you will use this name to access the box for SSH or other network activity
 #This block is for the MySQL container that we need for running our database.
  db:
    container_name: ${APP_NAME}-database
    image: ${DB_PROVIDER}
    #command: ['--character-set-server=utf8mb4', '--collationserver=utf8mb4_unicode_ci','--default-authenticationplugin=mysql_native_password']
    ports:
      - ${DB_PORT}:3306
    restart: always
    #This environment section allows you to set environment variables within the container
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    volumes:
      - C:/bbdd/Lamp_db:/var/lib/mysql
      - C:/persistence_lamp/bd:/docker-entrypoint-initdb.d/:ro
    networks:
      net: 
        ipv4_address: 172.21.1.2


#This is the start of the second container we have.
#The second is for our Apache/PHP container.
  www:
 #This is the build section of the Docker Compose file. This is where the docker-compose program will look if you use it's build
 #command. Example docker compose build
    build:
      #Context is the location of where your DockerFile resides on your local machine you are building the image from.
      context: .
      args:
        - PHP_VERSION=${PHP_VERSION}
    container_name: ${APP_NAME}-www
    command: ["/usr/sbin/apache2ctl", "-D", "FOREGROUND"]
    tty: true
    links:
      - db:${DB_PROVIDER}

    #Volumes are how you mount your local filesystem to the filesystem inside your container. Works the same way as SMB works
    #Except a lot easier. The syntax is shown in the example below
    volumes:
      - ${APP_DIR}:/var/www/html:cached

    #Ports are used when you want to publish ports and allow them to be accessed by computers or services outside
    #of the docker network. Since we are working on a LAMP stack that we want to access from a browser, we opened ports
    #80 & 443 for http and https access.
    ports:
      - ${HTTP_PORT}:80
      - ${HTTPS_PORT}:443

    networks:
      net:
        ipv4_address: 172.21.1.3


#This block is for the database administrator tool phpmyadmin.
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
      - ${PMA_PORT}:80
    environment:
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    networks:
      net:
        ipv4_address: 172.21.1.4

# The network used for this containers
networks:
  net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.1.0/24
